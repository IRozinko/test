/*
 * This file is generated by jOOQ.
*/
package fintech.bo.spain.alfa.db.jooq.alfa.tables;


import fintech.bo.spain.alfa.db.jooq.alfa.Alfa;
import fintech.bo.spain.alfa.db.jooq.alfa.Keys;
import fintech.bo.spain.alfa.db.jooq.alfa.tables.records.AddressRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Address extends TableImpl<AddressRecord> {

    private static final long serialVersionUID = -996661538;

    /**
     * The reference instance of <code>alfa.address</code>
     */
    public static final Address ADDRESS = new Address();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AddressRecord> getRecordType() {
        return AddressRecord.class;
    }

    /**
     * The column <code>alfa.address.id</code>.
     */
    public final TableField<AddressRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('alfa.address_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>alfa.address.city</code>.
     */
    public final TableField<AddressRecord, String> CITY = createField("city", org.jooq.impl.SQLDataType.CLOB.nullable(false).defaultValue(org.jooq.impl.DSL.field("''::text", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>alfa.address.postal_code</code>.
     */
    public final TableField<AddressRecord, String> POSTAL_CODE = createField("postal_code", org.jooq.impl.SQLDataType.CLOB.nullable(false).defaultValue(org.jooq.impl.DSL.field("''::text", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>alfa.address.province</code>.
     */
    public final TableField<AddressRecord, String> PROVINCE = createField("province", org.jooq.impl.SQLDataType.CLOB.nullable(false).defaultValue(org.jooq.impl.DSL.field("''::text", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>alfa.address.state</code>.
     */
    public final TableField<AddressRecord, String> STATE = createField("state", org.jooq.impl.SQLDataType.CLOB.nullable(false).defaultValue(org.jooq.impl.DSL.field("''::text", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * Create a <code>alfa.address</code> table reference
     */
    public Address() {
        this("address", null);
    }

    /**
     * Create an aliased <code>alfa.address</code> table reference
     */
    public Address(String alias) {
        this(alias, ADDRESS);
    }

    private Address(String alias, Table<AddressRecord> aliased) {
        this(alias, aliased, null);
    }

    private Address(String alias, Table<AddressRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Alfa.ALFA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AddressRecord, Long> getIdentity() {
        return Keys.IDENTITY_ADDRESS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AddressRecord> getPrimaryKey() {
        return Keys.ADDRESS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AddressRecord>> getKeys() {
        return Arrays.<UniqueKey<AddressRecord>>asList(Keys.ADDRESS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Address as(String alias) {
        return new Address(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Address rename(String name) {
        return new Address(name, null);
    }
}
