/*
 * This file is generated by jOOQ.
*/
package fintech.bo.db.jooq.sms.tables;


import fintech.bo.db.jooq.sms.Keys;
import fintech.bo.db.jooq.sms.Sms;
import fintech.bo.db.jooq.sms.tables.records.IncomingRecord;
import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Incoming extends TableImpl<IncomingRecord> {

    private static final long serialVersionUID = 359055250;

    /**
     * The reference instance of <code>sms.incoming</code>
     */
    public static final Incoming INCOMING = new Incoming();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IncomingRecord> getRecordType() {
        return IncomingRecord.class;
    }

    /**
     * The column <code>sms.incoming.id</code>.
     */
    public final TableField<IncomingRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>sms.incoming.created_at</code>.
     */
    public final TableField<IncomingRecord, LocalDateTime> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>sms.incoming.created_by</code>.
     */
    public final TableField<IncomingRecord, String> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>sms.incoming.entity_version</code>.
     */
    public final TableField<IncomingRecord, Long> ENTITY_VERSION = createField("entity_version", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>sms.incoming.updated_at</code>.
     */
    public final TableField<IncomingRecord, LocalDateTime> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>sms.incoming.updated_by</code>.
     */
    public final TableField<IncomingRecord, String> UPDATED_BY = createField("updated_by", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>sms.incoming.phone_number</code>.
     */
    public final TableField<IncomingRecord, String> PHONE_NUMBER = createField("phone_number", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>sms.incoming.raw_data_json</code>.
     */
    public final TableField<IncomingRecord, String> RAW_DATA_JSON = createField("raw_data_json", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>sms.incoming.source</code>.
     */
    public final TableField<IncomingRecord, String> SOURCE = createField("source", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>sms.incoming.text</code>.
     */
    public final TableField<IncomingRecord, String> TEXT = createField("text", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>sms.incoming</code> table reference
     */
    public Incoming() {
        this("incoming", null);
    }

    /**
     * Create an aliased <code>sms.incoming</code> table reference
     */
    public Incoming(String alias) {
        this(alias, INCOMING);
    }

    private Incoming(String alias, Table<IncomingRecord> aliased) {
        this(alias, aliased, null);
    }

    private Incoming(String alias, Table<IncomingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Sms.SMS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<IncomingRecord> getPrimaryKey() {
        return Keys.INCOMING_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<IncomingRecord>> getKeys() {
        return Arrays.<UniqueKey<IncomingRecord>>asList(Keys.INCOMING_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Incoming as(String alias) {
        return new Incoming(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Incoming rename(String name) {
        return new Incoming(name, null);
    }
}
