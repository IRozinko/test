/*
 * This file is generated by jOOQ.
*/
package fintech.bo.db.jooq.sms.tables;


import fintech.bo.db.jooq.sms.Keys;
import fintech.bo.db.jooq.sms.Sms;
import fintech.bo.db.jooq.sms.tables.records.LogRecord;
import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Log extends TableImpl<LogRecord> {

    private static final long serialVersionUID = 1606750995;

    /**
     * The reference instance of <code>sms.log</code>
     */
    public static final Log LOG = new Log();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LogRecord> getRecordType() {
        return LogRecord.class;
    }

    /**
     * The column <code>sms.log.id</code>.
     */
    public final TableField<LogRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>sms.log.created_at</code>.
     */
    public final TableField<LogRecord, LocalDateTime> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>sms.log.created_by</code>.
     */
    public final TableField<LogRecord, String> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>sms.log.entity_version</code>.
     */
    public final TableField<LogRecord, Long> ENTITY_VERSION = createField("entity_version", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>sms.log.updated_at</code>.
     */
    public final TableField<LogRecord, LocalDateTime> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>sms.log.updated_by</code>.
     */
    public final TableField<LogRecord, String> UPDATED_BY = createField("updated_by", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>sms.log.attempt_timeout_in_seconds</code>.
     */
    public final TableField<LogRecord, Integer> ATTEMPT_TIMEOUT_IN_SECONDS = createField("attempt_timeout_in_seconds", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>sms.log.attempts</code>.
     */
    public final TableField<LogRecord, Integer> ATTEMPTS = createField("attempts", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>sms.log.delivery_report_error</code>.
     */
    public final TableField<LogRecord, String> DELIVERY_REPORT_ERROR = createField("delivery_report_error", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>sms.log.delivery_report_received_at</code>.
     */
    public final TableField<LogRecord, LocalDateTime> DELIVERY_REPORT_RECEIVED_AT = createField("delivery_report_received_at", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>sms.log.delivery_report_status</code>.
     */
    public final TableField<LogRecord, String> DELIVERY_REPORT_STATUS = createField("delivery_report_status", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>sms.log.delivery_report_status2</code>.
     */
    public final TableField<LogRecord, String> DELIVERY_REPORT_STATUS2 = createField("delivery_report_status2", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>sms.log.error</code>.
     */
    public final TableField<LogRecord, String> ERROR = createField("error", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>sms.log.max_attempts</code>.
     */
    public final TableField<LogRecord, Integer> MAX_ATTEMPTS = createField("max_attempts", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>sms.log.next_attempt_at</code>.
     */
    public final TableField<LogRecord, LocalDateTime> NEXT_ATTEMPT_AT = createField("next_attempt_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>sms.log.provider</code>.
     */
    public final TableField<LogRecord, String> PROVIDER = createField("provider", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>sms.log.provider_id</code>.
     */
    public final TableField<LogRecord, String> PROVIDER_ID = createField("provider_id", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>sms.log.provider_message</code>.
     */
    public final TableField<LogRecord, String> PROVIDER_MESSAGE = createField("provider_message", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>sms.log.sender_id</code>.
     */
    public final TableField<LogRecord, String> SENDER_ID = createField("sender_id", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>sms.log.sending_status</code>.
     */
    public final TableField<LogRecord, String> SENDING_STATUS = createField("sending_status", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>sms.log.sms_text</code>.
     */
    public final TableField<LogRecord, String> SMS_TEXT = createField("sms_text", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>sms.log.send_to</code>.
     */
    public final TableField<LogRecord, String> SEND_TO = createField("send_to", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>sms.log</code> table reference
     */
    public Log() {
        this("log", null);
    }

    /**
     * Create an aliased <code>sms.log</code> table reference
     */
    public Log(String alias) {
        this(alias, LOG);
    }

    private Log(String alias, Table<LogRecord> aliased) {
        this(alias, aliased, null);
    }

    private Log(String alias, Table<LogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Sms.SMS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LogRecord> getPrimaryKey() {
        return Keys.LOG_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LogRecord>> getKeys() {
        return Arrays.<UniqueKey<LogRecord>>asList(Keys.LOG_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Log as(String alias) {
        return new Log(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Log rename(String name) {
        return new Log(name, null);
    }
}
