/*
 * This file is generated by jOOQ.
*/
package fintech.bo.db.jooq.crm.tables;


import fintech.bo.db.jooq.crm.Crm;
import fintech.bo.db.jooq.crm.Keys;
import fintech.bo.db.jooq.crm.tables.records.CountryRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Country extends TableImpl<CountryRecord> {

    private static final long serialVersionUID = 2070796177;

    /**
     * The reference instance of <code>crm.country</code>
     */
    public static final Country COUNTRY = new Country();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CountryRecord> getRecordType() {
        return CountryRecord.class;
    }

    /**
     * The column <code>crm.country.id</code>.
     */
    public final TableField<CountryRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('crm.country_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>crm.country.name</code>.
     */
    public final TableField<CountryRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>crm.country.display_name</code>.
     */
    public final TableField<CountryRecord, String> DISPLAY_NAME = createField("display_name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>crm.country.nationality</code>.
     */
    public final TableField<CountryRecord, String> NATIONALITY = createField("nationality", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>crm.country.nationality_display_name</code>.
     */
    public final TableField<CountryRecord, String> NATIONALITY_DISPLAY_NAME = createField("nationality_display_name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>crm.country.code</code>.
     */
    public final TableField<CountryRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.CHAR.length(2).nullable(false).defaultValue(org.jooq.impl.DSL.field("'XX'::bpchar", org.jooq.impl.SQLDataType.CHAR)), this, "");

    /**
     * The column <code>crm.country.home_country</code>.
     */
    public final TableField<CountryRecord, Boolean> HOME_COUNTRY = createField("home_country", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>crm.country</code> table reference
     */
    public Country() {
        this("country", null);
    }

    /**
     * Create an aliased <code>crm.country</code> table reference
     */
    public Country(String alias) {
        this(alias, COUNTRY);
    }

    private Country(String alias, Table<CountryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Country(String alias, Table<CountryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Crm.CRM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CountryRecord, Long> getIdentity() {
        return Keys.IDENTITY_COUNTRY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CountryRecord> getPrimaryKey() {
        return Keys.COUNTRY_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CountryRecord>> getKeys() {
        return Arrays.<UniqueKey<CountryRecord>>asList(Keys.COUNTRY_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Country as(String alias) {
        return new Country(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Country rename(String name) {
        return new Country(name, null);
    }
}
