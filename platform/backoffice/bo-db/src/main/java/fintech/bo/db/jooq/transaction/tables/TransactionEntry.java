/*
 * This file is generated by jOOQ.
*/
package fintech.bo.db.jooq.transaction.tables;


import fintech.bo.db.jooq.transaction.Keys;
import fintech.bo.db.jooq.transaction.Transaction;
import fintech.bo.db.jooq.transaction.tables.records.TransactionEntryRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TransactionEntry extends TableImpl<TransactionEntryRecord> {

    private static final long serialVersionUID = 456012313;

    /**
     * The reference instance of <code>transaction.transaction_entry</code>
     */
    public static final TransactionEntry TRANSACTION_ENTRY = new TransactionEntry();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionEntryRecord> getRecordType() {
        return TransactionEntryRecord.class;
    }

    /**
     * The column <code>transaction.transaction_entry.id</code>.
     */
    public final TableField<TransactionEntryRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>transaction.transaction_entry.created_at</code>.
     */
    public final TableField<TransactionEntryRecord, LocalDateTime> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>transaction.transaction_entry.created_by</code>.
     */
    public final TableField<TransactionEntryRecord, String> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>transaction.transaction_entry.entity_version</code>.
     */
    public final TableField<TransactionEntryRecord, Long> ENTITY_VERSION = createField("entity_version", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>transaction.transaction_entry.updated_at</code>.
     */
    public final TableField<TransactionEntryRecord, LocalDateTime> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>transaction.transaction_entry.updated_by</code>.
     */
    public final TableField<TransactionEntryRecord, String> UPDATED_BY = createField("updated_by", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>transaction.transaction_entry.amount_applied</code>.
     */
    public final TableField<TransactionEntryRecord, BigDecimal> AMOUNT_APPLIED = createField("amount_applied", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 4).nullable(false), this, "");

    /**
     * The column <code>transaction.transaction_entry.amount_invoiced</code>.
     */
    public final TableField<TransactionEntryRecord, BigDecimal> AMOUNT_INVOICED = createField("amount_invoiced", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 4).nullable(false), this, "");

    /**
     * The column <code>transaction.transaction_entry.amount_paid</code>.
     */
    public final TableField<TransactionEntryRecord, BigDecimal> AMOUNT_PAID = createField("amount_paid", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 4).nullable(false), this, "");

    /**
     * The column <code>transaction.transaction_entry.amount_written_off</code>.
     */
    public final TableField<TransactionEntryRecord, BigDecimal> AMOUNT_WRITTEN_OFF = createField("amount_written_off", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 4).nullable(false), this, "");

    /**
     * The column <code>transaction.transaction_entry.sub_type</code>.
     */
    public final TableField<TransactionEntryRecord, String> SUB_TYPE = createField("sub_type", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>transaction.transaction_entry.type</code>.
     */
    public final TableField<TransactionEntryRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>transaction.transaction_entry.transaction_id</code>.
     */
    public final TableField<TransactionEntryRecord, Long> TRANSACTION_ID = createField("transaction_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>transaction.transaction_entry.amount_scheduled</code>.
     */
    public final TableField<TransactionEntryRecord, BigDecimal> AMOUNT_SCHEDULED = createField("amount_scheduled", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 4).nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.NUMERIC)), this, "");

    /**
     * Create a <code>transaction.transaction_entry</code> table reference
     */
    public TransactionEntry() {
        this("transaction_entry", null);
    }

    /**
     * Create an aliased <code>transaction.transaction_entry</code> table reference
     */
    public TransactionEntry(String alias) {
        this(alias, TRANSACTION_ENTRY);
    }

    private TransactionEntry(String alias, Table<TransactionEntryRecord> aliased) {
        this(alias, aliased, null);
    }

    private TransactionEntry(String alias, Table<TransactionEntryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Transaction.TRANSACTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TransactionEntryRecord> getPrimaryKey() {
        return Keys.TRANSACTION_ENTRY_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TransactionEntryRecord>> getKeys() {
        return Arrays.<UniqueKey<TransactionEntryRecord>>asList(Keys.TRANSACTION_ENTRY_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TransactionEntryRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TransactionEntryRecord, ?>>asList(Keys.TRANSACTION_ENTRY__FK_TRANSACTION_ENTRY_TRANSACTION_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TransactionEntry as(String alias) {
        return new TransactionEntry(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionEntry rename(String name) {
        return new TransactionEntry(name, null);
    }
}
