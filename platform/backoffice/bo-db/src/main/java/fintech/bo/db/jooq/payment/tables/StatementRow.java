/*
 * This file is generated by jOOQ.
*/
package fintech.bo.db.jooq.payment.tables;


import fintech.bo.db.jooq.payment.Keys;
import fintech.bo.db.jooq.payment.Payment;
import fintech.bo.db.jooq.payment.tables.records.StatementRowRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StatementRow extends TableImpl<StatementRowRecord> {

    private static final long serialVersionUID = -1579898986;

    /**
     * The reference instance of <code>payment.statement_row</code>
     */
    public static final StatementRow STATEMENT_ROW = new StatementRow();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StatementRowRecord> getRecordType() {
        return StatementRowRecord.class;
    }

    /**
     * The column <code>payment.statement_row.id</code>.
     */
    public final TableField<StatementRowRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>payment.statement_row.created_at</code>.
     */
    public final TableField<StatementRowRecord, LocalDateTime> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>payment.statement_row.created_by</code>.
     */
    public final TableField<StatementRowRecord, String> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>payment.statement_row.entity_version</code>.
     */
    public final TableField<StatementRowRecord, Long> ENTITY_VERSION = createField("entity_version", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>payment.statement_row.updated_at</code>.
     */
    public final TableField<StatementRowRecord, LocalDateTime> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>payment.statement_row.updated_by</code>.
     */
    public final TableField<StatementRowRecord, String> UPDATED_BY = createField("updated_by", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>payment.statement_row.account_number</code>.
     */
    public final TableField<StatementRowRecord, String> ACCOUNT_NUMBER = createField("account_number", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>payment.statement_row.amount</code>.
     */
    public final TableField<StatementRowRecord, BigDecimal> AMOUNT = createField("amount", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 2).nullable(false), this, "");

    /**
     * The column <code>payment.statement_row.balance</code>.
     */
    public final TableField<StatementRowRecord, BigDecimal> BALANCE = createField("balance", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 2).nullable(false), this, "");

    /**
     * The column <code>payment.statement_row.counterparty_account</code>.
     */
    public final TableField<StatementRowRecord, String> COUNTERPARTY_ACCOUNT = createField("counterparty_account", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>payment.statement_row.counterparty_address</code>.
     */
    public final TableField<StatementRowRecord, String> COUNTERPARTY_ADDRESS = createField("counterparty_address", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>payment.statement_row.counterparty_name</code>.
     */
    public final TableField<StatementRowRecord, String> COUNTERPARTY_NAME = createField("counterparty_name", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>payment.statement_row.currency</code>.
     */
    public final TableField<StatementRowRecord, String> CURRENCY = createField("currency", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>payment.statement_row.date</code>.
     */
    public final TableField<StatementRowRecord, LocalDate> DATE = createField("date", org.jooq.impl.SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>payment.statement_row.description</code>.
     */
    public final TableField<StatementRowRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>payment.statement_row.key</code>.
     */
    public final TableField<StatementRowRecord, String> KEY = createField("key", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>payment.statement_row.payment_id</code>.
     */
    public final TableField<StatementRowRecord, Long> PAYMENT_ID = createField("payment_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>payment.statement_row.reference</code>.
     */
    public final TableField<StatementRowRecord, String> REFERENCE = createField("reference", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>payment.statement_row.source_json</code>.
     */
    public final TableField<StatementRowRecord, String> SOURCE_JSON = createField("source_json", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>payment.statement_row.status</code>.
     */
    public final TableField<StatementRowRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>payment.statement_row.status_message</code>.
     */
    public final TableField<StatementRowRecord, String> STATUS_MESSAGE = createField("status_message", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>payment.statement_row.suggested_transaction_sub_type</code>.
     */
    public final TableField<StatementRowRecord, String> SUGGESTED_TRANSACTION_SUB_TYPE = createField("suggested_transaction_sub_type", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>payment.statement_row.transaction_code</code>.
     */
    public final TableField<StatementRowRecord, String> TRANSACTION_CODE = createField("transaction_code", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>payment.statement_row.value_date</code>.
     */
    public final TableField<StatementRowRecord, LocalDate> VALUE_DATE = createField("value_date", org.jooq.impl.SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>payment.statement_row.statement_id</code>.
     */
    public final TableField<StatementRowRecord, Long> STATEMENT_ID = createField("statement_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>payment.statement_row</code> table reference
     */
    public StatementRow() {
        this("statement_row", null);
    }

    /**
     * Create an aliased <code>payment.statement_row</code> table reference
     */
    public StatementRow(String alias) {
        this(alias, STATEMENT_ROW);
    }

    private StatementRow(String alias, Table<StatementRowRecord> aliased) {
        this(alias, aliased, null);
    }

    private StatementRow(String alias, Table<StatementRowRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Payment.PAYMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StatementRowRecord> getPrimaryKey() {
        return Keys.STATEMENT_ROW_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StatementRowRecord>> getKeys() {
        return Arrays.<UniqueKey<StatementRowRecord>>asList(Keys.STATEMENT_ROW_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<StatementRowRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<StatementRowRecord, ?>>asList(Keys.STATEMENT_ROW__FK_STATEMENT_ROW_PAYMENT_ID, Keys.STATEMENT_ROW__FK_STATEMENT_ROW_STATEMENT_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public StatementRow as(String alias) {
        return new StatementRow(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public StatementRow rename(String name) {
        return new StatementRow(name, null);
    }
}
