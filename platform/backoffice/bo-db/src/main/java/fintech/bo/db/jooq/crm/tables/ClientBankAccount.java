/*
 * This file is generated by jOOQ.
*/
package fintech.bo.db.jooq.crm.tables;


import fintech.bo.db.jooq.crm.Crm;
import fintech.bo.db.jooq.crm.Keys;
import fintech.bo.db.jooq.crm.tables.records.ClientBankAccountRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClientBankAccount extends TableImpl<ClientBankAccountRecord> {

    private static final long serialVersionUID = 393898467;

    /**
     * The reference instance of <code>crm.client_bank_account</code>
     */
    public static final ClientBankAccount CLIENT_BANK_ACCOUNT = new ClientBankAccount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClientBankAccountRecord> getRecordType() {
        return ClientBankAccountRecord.class;
    }

    /**
     * The column <code>crm.client_bank_account.id</code>.
     */
    public final TableField<ClientBankAccountRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>crm.client_bank_account.created_at</code>.
     */
    public final TableField<ClientBankAccountRecord, LocalDateTime> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>crm.client_bank_account.created_by</code>.
     */
    public final TableField<ClientBankAccountRecord, String> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>crm.client_bank_account.entity_version</code>.
     */
    public final TableField<ClientBankAccountRecord, Long> ENTITY_VERSION = createField("entity_version", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>crm.client_bank_account.updated_at</code>.
     */
    public final TableField<ClientBankAccountRecord, LocalDateTime> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>crm.client_bank_account.updated_by</code>.
     */
    public final TableField<ClientBankAccountRecord, String> UPDATED_BY = createField("updated_by", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>crm.client_bank_account.account_number</code>.
     */
    public final TableField<ClientBankAccountRecord, String> ACCOUNT_NUMBER = createField("account_number", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>crm.client_bank_account.account_owner_name</code>.
     */
    public final TableField<ClientBankAccountRecord, String> ACCOUNT_OWNER_NAME = createField("account_owner_name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>crm.client_bank_account.balance</code>.
     */
    public final TableField<ClientBankAccountRecord, BigDecimal> BALANCE = createField("balance", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 2), this, "");

    /**
     * The column <code>crm.client_bank_account.bank_name</code>.
     */
    public final TableField<ClientBankAccountRecord, String> BANK_NAME = createField("bank_name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>crm.client_bank_account.currency</code>.
     */
    public final TableField<ClientBankAccountRecord, String> CURRENCY = createField("currency", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>crm.client_bank_account.is_primary</code>.
     */
    public final TableField<ClientBankAccountRecord, Boolean> IS_PRIMARY = createField("is_primary", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>crm.client_bank_account.client_id</code>.
     */
    public final TableField<ClientBankAccountRecord, Long> CLIENT_ID = createField("client_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>crm.client_bank_account.number_of_transactions</code>.
     */
    public final TableField<ClientBankAccountRecord, Long> NUMBER_OF_TRANSACTIONS = createField("number_of_transactions", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>crm.client_bank_account</code> table reference
     */
    public ClientBankAccount() {
        this("client_bank_account", null);
    }

    /**
     * Create an aliased <code>crm.client_bank_account</code> table reference
     */
    public ClientBankAccount(String alias) {
        this(alias, CLIENT_BANK_ACCOUNT);
    }

    private ClientBankAccount(String alias, Table<ClientBankAccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private ClientBankAccount(String alias, Table<ClientBankAccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Crm.CRM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ClientBankAccountRecord> getPrimaryKey() {
        return Keys.CLIENT_BANK_ACCOUNT_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ClientBankAccountRecord>> getKeys() {
        return Arrays.<UniqueKey<ClientBankAccountRecord>>asList(Keys.CLIENT_BANK_ACCOUNT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ClientBankAccountRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ClientBankAccountRecord, ?>>asList(Keys.CLIENT_BANK_ACCOUNT__FK_CLIENT_BANK_ACCOUNT_CLIENT_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClientBankAccount as(String alias) {
        return new ClientBankAccount(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ClientBankAccount rename(String name) {
        return new ClientBankAccount(name, null);
    }
}
