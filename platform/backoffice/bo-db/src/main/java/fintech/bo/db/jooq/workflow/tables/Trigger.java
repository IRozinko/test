/*
 * This file is generated by jOOQ.
*/
package fintech.bo.db.jooq.workflow.tables;


import fintech.bo.db.jooq.workflow.Keys;
import fintech.bo.db.jooq.workflow.Workflow;
import fintech.bo.db.jooq.workflow.tables.records.TriggerRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Trigger extends TableImpl<TriggerRecord> {

    private static final long serialVersionUID = 2095500141;

    /**
     * The reference instance of <code>workflow.trigger</code>
     */
    public static final Trigger TRIGGER = new Trigger();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TriggerRecord> getRecordType() {
        return TriggerRecord.class;
    }

    /**
     * The column <code>workflow.trigger.id</code>.
     */
    public final TableField<TriggerRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>workflow.trigger.created_at</code>.
     */
    public final TableField<TriggerRecord, LocalDateTime> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>workflow.trigger.created_by</code>.
     */
    public final TableField<TriggerRecord, String> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>workflow.trigger.updated_at</code>.
     */
    public final TableField<TriggerRecord, LocalDateTime> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>workflow.trigger.updated_by</code>.
     */
    public final TableField<TriggerRecord, String> UPDATED_BY = createField("updated_by", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>workflow.trigger.entity_version</code>.
     */
    public final TableField<TriggerRecord, Long> ENTITY_VERSION = createField("entity_version", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>workflow.trigger.workflow_id</code>.
     */
    public final TableField<TriggerRecord, Long> WORKFLOW_ID = createField("workflow_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>workflow.trigger.activity_id</code>.
     */
    public final TableField<TriggerRecord, Long> ACTIVITY_ID = createField("activity_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>workflow.trigger.status</code>.
     */
    public final TableField<TriggerRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>workflow.trigger.name</code>.
     */
    public final TableField<TriggerRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>workflow.trigger.params</code>.
     */
    public final TableField<TriggerRecord, String> PARAMS = createField("params", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>workflow.trigger.error</code>.
     */
    public final TableField<TriggerRecord, String> ERROR = createField("error", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>workflow.trigger.next_attempt_at</code>.
     */
    public final TableField<TriggerRecord, LocalDateTime> NEXT_ATTEMPT_AT = createField("next_attempt_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * Create a <code>workflow.trigger</code> table reference
     */
    public Trigger() {
        this("trigger", null);
    }

    /**
     * Create an aliased <code>workflow.trigger</code> table reference
     */
    public Trigger(String alias) {
        this(alias, TRIGGER);
    }

    private Trigger(String alias, Table<TriggerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Trigger(String alias, Table<TriggerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Workflow.WORKFLOW;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TriggerRecord> getPrimaryKey() {
        return Keys.TRIGGER_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TriggerRecord>> getKeys() {
        return Arrays.<UniqueKey<TriggerRecord>>asList(Keys.TRIGGER_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TriggerRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TriggerRecord, ?>>asList(Keys.TRIGGER__TRIGGER_WORKFLOW_FK, Keys.TRIGGER__TRIGGER_ACTIVITY_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Trigger as(String alias) {
        return new Trigger(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Trigger rename(String name) {
        return new Trigger(name, null);
    }
}
