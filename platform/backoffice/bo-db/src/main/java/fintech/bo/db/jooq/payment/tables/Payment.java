/*
 * This file is generated by jOOQ.
*/
package fintech.bo.db.jooq.payment.tables;


import fintech.bo.db.jooq.payment.Keys;
import fintech.bo.db.jooq.payment.tables.records.PaymentRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Payment extends TableImpl<PaymentRecord> {

    private static final long serialVersionUID = 1878178354;

    /**
     * The reference instance of <code>payment.payment</code>
     */
    public static final Payment PAYMENT_ = new Payment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PaymentRecord> getRecordType() {
        return PaymentRecord.class;
    }

    /**
     * The column <code>payment.payment.id</code>.
     */
    public final TableField<PaymentRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>payment.payment.created_at</code>.
     */
    public final TableField<PaymentRecord, LocalDateTime> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>payment.payment.created_by</code>.
     */
    public final TableField<PaymentRecord, String> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>payment.payment.entity_version</code>.
     */
    public final TableField<PaymentRecord, Long> ENTITY_VERSION = createField("entity_version", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>payment.payment.updated_at</code>.
     */
    public final TableField<PaymentRecord, LocalDateTime> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>payment.payment.updated_by</code>.
     */
    public final TableField<PaymentRecord, String> UPDATED_BY = createField("updated_by", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>payment.payment.amount</code>.
     */
    public final TableField<PaymentRecord, BigDecimal> AMOUNT = createField("amount", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 4).nullable(false), this, "");

    /**
     * The column <code>payment.payment.counterparty_account</code>.
     */
    public final TableField<PaymentRecord, String> COUNTERPARTY_ACCOUNT = createField("counterparty_account", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>payment.payment.counterparty_address</code>.
     */
    public final TableField<PaymentRecord, String> COUNTERPARTY_ADDRESS = createField("counterparty_address", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>payment.payment.counterparty_name</code>.
     */
    public final TableField<PaymentRecord, String> COUNTERPARTY_NAME = createField("counterparty_name", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>payment.payment.details</code>.
     */
    public final TableField<PaymentRecord, String> DETAILS = createField("details", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>payment.payment.key</code>.
     */
    public final TableField<PaymentRecord, String> KEY = createField("key", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>payment.payment.payment_type</code>.
     */
    public final TableField<PaymentRecord, String> PAYMENT_TYPE = createField("payment_type", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>payment.payment.pending_amount</code>.
     */
    public final TableField<PaymentRecord, BigDecimal> PENDING_AMOUNT = createField("pending_amount", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 4).nullable(false), this, "");

    /**
     * The column <code>payment.payment.posted_at</code>.
     */
    public final TableField<PaymentRecord, LocalDateTime> POSTED_AT = createField("posted_at", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>payment.payment.reference</code>.
     */
    public final TableField<PaymentRecord, String> REFERENCE = createField("reference", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>payment.payment.status</code>.
     */
    public final TableField<PaymentRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>payment.payment.status_detail</code>.
     */
    public final TableField<PaymentRecord, String> STATUS_DETAIL = createField("status_detail", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>payment.payment.value_date</code>.
     */
    public final TableField<PaymentRecord, LocalDate> VALUE_DATE = createField("value_date", org.jooq.impl.SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>payment.payment.account_id</code>.
     */
    public final TableField<PaymentRecord, Long> ACCOUNT_ID = createField("account_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>payment.payment.bank_order_code</code>.
     */
    public final TableField<PaymentRecord, String> BANK_ORDER_CODE = createField("bank_order_code", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>payment.payment</code> table reference
     */
    public Payment() {
        this("payment", null);
    }

    /**
     * Create an aliased <code>payment.payment</code> table reference
     */
    public Payment(String alias) {
        this(alias, PAYMENT_);
    }

    private Payment(String alias, Table<PaymentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Payment(String alias, Table<PaymentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return fintech.bo.db.jooq.payment.Payment.PAYMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PaymentRecord> getPrimaryKey() {
        return Keys.PAYMENT_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PaymentRecord>> getKeys() {
        return Arrays.<UniqueKey<PaymentRecord>>asList(Keys.PAYMENT_PKEY, Keys.IDX_PAYMENT_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PaymentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PaymentRecord, ?>>asList(Keys.PAYMENT__FK_PAYMENT_ACCOUNT_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Payment as(String alias) {
        return new Payment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Payment rename(String name) {
        return new Payment(name, null);
    }
}
