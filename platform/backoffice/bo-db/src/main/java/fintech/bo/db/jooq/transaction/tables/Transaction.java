/*
 * This file is generated by jOOQ.
*/
package fintech.bo.db.jooq.transaction.tables;


import fintech.bo.db.jooq.transaction.Keys;
import fintech.bo.db.jooq.transaction.tables.records.TransactionRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Transaction extends TableImpl<TransactionRecord> {

    private static final long serialVersionUID = 1472255932;

    /**
     * The reference instance of <code>transaction.transaction</code>
     */
    public static final Transaction TRANSACTION_ = new Transaction();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionRecord> getRecordType() {
        return TransactionRecord.class;
    }

    /**
     * The column <code>transaction.transaction.id</code>.
     */
    public final TableField<TransactionRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>transaction.transaction.created_at</code>.
     */
    public final TableField<TransactionRecord, LocalDateTime> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>transaction.transaction.created_by</code>.
     */
    public final TableField<TransactionRecord, String> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>transaction.transaction.entity_version</code>.
     */
    public final TableField<TransactionRecord, Long> ENTITY_VERSION = createField("entity_version", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>transaction.transaction.updated_at</code>.
     */
    public final TableField<TransactionRecord, LocalDateTime> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>transaction.transaction.updated_by</code>.
     */
    public final TableField<TransactionRecord, String> UPDATED_BY = createField("updated_by", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>transaction.transaction.booking_date</code>.
     */
    public final TableField<TransactionRecord, LocalDate> BOOKING_DATE = createField("booking_date", org.jooq.impl.SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>transaction.transaction.cash_in</code>.
     */
    public final TableField<TransactionRecord, BigDecimal> CASH_IN = createField("cash_in", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 4).nullable(false), this, "");

    /**
     * The column <code>transaction.transaction.cash_out</code>.
     */
    public final TableField<TransactionRecord, BigDecimal> CASH_OUT = createField("cash_out", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 4).nullable(false), this, "");

    /**
     * The column <code>transaction.transaction.client_id</code>.
     */
    public final TableField<TransactionRecord, Long> CLIENT_ID = createField("client_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>transaction.transaction.comments</code>.
     */
    public final TableField<TransactionRecord, String> COMMENTS = createField("comments", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>transaction.transaction.disbursement_id</code>.
     */
    public final TableField<TransactionRecord, Long> DISBURSEMENT_ID = createField("disbursement_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>transaction.transaction.fee_applied</code>.
     */
    public final TableField<TransactionRecord, BigDecimal> FEE_APPLIED = createField("fee_applied", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 4).nullable(false), this, "");

    /**
     * The column <code>transaction.transaction.fee_invoiced</code>.
     */
    public final TableField<TransactionRecord, BigDecimal> FEE_INVOICED = createField("fee_invoiced", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 4).nullable(false), this, "");

    /**
     * The column <code>transaction.transaction.fee_paid</code>.
     */
    public final TableField<TransactionRecord, BigDecimal> FEE_PAID = createField("fee_paid", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 4).nullable(false), this, "");

    /**
     * The column <code>transaction.transaction.fee_written_off</code>.
     */
    public final TableField<TransactionRecord, BigDecimal> FEE_WRITTEN_OFF = createField("fee_written_off", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 4).nullable(false), this, "");

    /**
     * The column <code>transaction.transaction.institution_account_id</code>.
     */
    public final TableField<TransactionRecord, Long> INSTITUTION_ACCOUNT_ID = createField("institution_account_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>transaction.transaction.institution_id</code>.
     */
    public final TableField<TransactionRecord, Long> INSTITUTION_ID = createField("institution_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>transaction.transaction.interest_applied</code>.
     */
    public final TableField<TransactionRecord, BigDecimal> INTEREST_APPLIED = createField("interest_applied", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 4).nullable(false), this, "");

    /**
     * The column <code>transaction.transaction.interest_invoiced</code>.
     */
    public final TableField<TransactionRecord, BigDecimal> INTEREST_INVOICED = createField("interest_invoiced", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 4).nullable(false), this, "");

    /**
     * The column <code>transaction.transaction.interest_paid</code>.
     */
    public final TableField<TransactionRecord, BigDecimal> INTEREST_PAID = createField("interest_paid", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 4).nullable(false), this, "");

    /**
     * The column <code>transaction.transaction.interest_written_off</code>.
     */
    public final TableField<TransactionRecord, BigDecimal> INTEREST_WRITTEN_OFF = createField("interest_written_off", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 4).nullable(false), this, "");

    /**
     * The column <code>transaction.transaction.invoice_id</code>.
     */
    public final TableField<TransactionRecord, Long> INVOICE_ID = createField("invoice_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>transaction.transaction.loan_id</code>.
     */
    public final TableField<TransactionRecord, Long> LOAN_ID = createField("loan_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>transaction.transaction.overpayment_received</code>.
     */
    public final TableField<TransactionRecord, BigDecimal> OVERPAYMENT_RECEIVED = createField("overpayment_received", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 4).nullable(false), this, "");

    /**
     * The column <code>transaction.transaction.overpayment_refunded</code>.
     */
    public final TableField<TransactionRecord, BigDecimal> OVERPAYMENT_REFUNDED = createField("overpayment_refunded", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 4).nullable(false), this, "");

    /**
     * The column <code>transaction.transaction.overpayment_used</code>.
     */
    public final TableField<TransactionRecord, BigDecimal> OVERPAYMENT_USED = createField("overpayment_used", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 4).nullable(false), this, "");

    /**
     * The column <code>transaction.transaction.payment_id</code>.
     */
    public final TableField<TransactionRecord, Long> PAYMENT_ID = createField("payment_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>transaction.transaction.penalty_applied</code>.
     */
    public final TableField<TransactionRecord, BigDecimal> PENALTY_APPLIED = createField("penalty_applied", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 4).nullable(false), this, "");

    /**
     * The column <code>transaction.transaction.penalty_invoiced</code>.
     */
    public final TableField<TransactionRecord, BigDecimal> PENALTY_INVOICED = createField("penalty_invoiced", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 4).nullable(false), this, "");

    /**
     * The column <code>transaction.transaction.penalty_paid</code>.
     */
    public final TableField<TransactionRecord, BigDecimal> PENALTY_PAID = createField("penalty_paid", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 4).nullable(false), this, "");

    /**
     * The column <code>transaction.transaction.penalty_written_off</code>.
     */
    public final TableField<TransactionRecord, BigDecimal> PENALTY_WRITTEN_OFF = createField("penalty_written_off", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 4).nullable(false), this, "");

    /**
     * The column <code>transaction.transaction.post_date</code>.
     */
    public final TableField<TransactionRecord, LocalDate> POST_DATE = createField("post_date", org.jooq.impl.SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>transaction.transaction.principal_disbursed</code>.
     */
    public final TableField<TransactionRecord, BigDecimal> PRINCIPAL_DISBURSED = createField("principal_disbursed", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 4).nullable(false), this, "");

    /**
     * The column <code>transaction.transaction.principal_invoiced</code>.
     */
    public final TableField<TransactionRecord, BigDecimal> PRINCIPAL_INVOICED = createField("principal_invoiced", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 4).nullable(false), this, "");

    /**
     * The column <code>transaction.transaction.principal_paid</code>.
     */
    public final TableField<TransactionRecord, BigDecimal> PRINCIPAL_PAID = createField("principal_paid", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 4).nullable(false), this, "");

    /**
     * The column <code>transaction.transaction.principal_written_off</code>.
     */
    public final TableField<TransactionRecord, BigDecimal> PRINCIPAL_WRITTEN_OFF = createField("principal_written_off", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 4).nullable(false), this, "");

    /**
     * The column <code>transaction.transaction.product_id</code>.
     */
    public final TableField<TransactionRecord, Long> PRODUCT_ID = createField("product_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>transaction.transaction.transaction_sub_type</code>.
     */
    public final TableField<TransactionRecord, String> TRANSACTION_SUB_TYPE = createField("transaction_sub_type", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>transaction.transaction.transaction_type</code>.
     */
    public final TableField<TransactionRecord, String> TRANSACTION_TYPE = createField("transaction_type", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>transaction.transaction.value_date</code>.
     */
    public final TableField<TransactionRecord, LocalDate> VALUE_DATE = createField("value_date", org.jooq.impl.SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>transaction.transaction.voided</code>.
     */
    public final TableField<TransactionRecord, Boolean> VOIDED = createField("voided", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>transaction.transaction.voided_date</code>.
     */
    public final TableField<TransactionRecord, LocalDate> VOIDED_DATE = createField("voided_date", org.jooq.impl.SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>transaction.transaction.voids_transaction_id</code>.
     */
    public final TableField<TransactionRecord, Long> VOIDS_TRANSACTION_ID = createField("voids_transaction_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>transaction.transaction.application_id</code>.
     */
    public final TableField<TransactionRecord, Long> APPLICATION_ID = createField("application_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>transaction.transaction.principal_scheduled</code>.
     */
    public final TableField<TransactionRecord, BigDecimal> PRINCIPAL_SCHEDULED = createField("principal_scheduled", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 4).nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>transaction.transaction.interest_scheduled</code>.
     */
    public final TableField<TransactionRecord, BigDecimal> INTEREST_SCHEDULED = createField("interest_scheduled", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 4).nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>transaction.transaction.penalty_scheduled</code>.
     */
    public final TableField<TransactionRecord, BigDecimal> PENALTY_SCHEDULED = createField("penalty_scheduled", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 4).nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>transaction.transaction.fee_scheduled</code>.
     */
    public final TableField<TransactionRecord, BigDecimal> FEE_SCHEDULED = createField("fee_scheduled", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 4).nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>transaction.transaction.schedule_id</code>.
     */
    public final TableField<TransactionRecord, Long> SCHEDULE_ID = createField("schedule_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>transaction.transaction.installment_id</code>.
     */
    public final TableField<TransactionRecord, Long> INSTALLMENT_ID = createField("installment_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>transaction.transaction.extension</code>.
     */
    public final TableField<TransactionRecord, Integer> EXTENSION = createField("extension", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>transaction.transaction.extension_days</code>.
     */
    public final TableField<TransactionRecord, Integer> EXTENSION_DAYS = createField("extension_days", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>transaction.transaction.contract_id</code>.
     */
    public final TableField<TransactionRecord, Long> CONTRACT_ID = createField("contract_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>transaction.transaction.credit_limit</code>.
     */
    public final TableField<TransactionRecord, BigDecimal> CREDIT_LIMIT = createField("credit_limit", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 4).nullable(false).defaultValue(org.jooq.impl.DSL.field("0.0000", org.jooq.impl.SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>transaction.transaction.credit_limit_available</code>.
     */
    public final TableField<TransactionRecord, BigDecimal> CREDIT_LIMIT_AVAILABLE = createField("credit_limit_available", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 4).nullable(false).defaultValue(org.jooq.impl.DSL.field("0.0000", org.jooq.impl.SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>transaction.transaction.dpd</code>.
     */
    public final TableField<TransactionRecord, Integer> DPD = createField("dpd", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>transaction.transaction</code> table reference
     */
    public Transaction() {
        this("transaction", null);
    }

    /**
     * Create an aliased <code>transaction.transaction</code> table reference
     */
    public Transaction(String alias) {
        this(alias, TRANSACTION_);
    }

    private Transaction(String alias, Table<TransactionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Transaction(String alias, Table<TransactionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return fintech.bo.db.jooq.transaction.Transaction.TRANSACTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TransactionRecord> getPrimaryKey() {
        return Keys.TRANSACTION_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TransactionRecord>> getKeys() {
        return Arrays.<UniqueKey<TransactionRecord>>asList(Keys.TRANSACTION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TransactionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TransactionRecord, ?>>asList(Keys.TRANSACTION__FK_TRANSACTION_VOIDS_TRANSACTION_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Transaction as(String alias) {
        return new Transaction(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transaction rename(String name) {
        return new Transaction(name, null);
    }
}
