/*
 * This file is generated by jOOQ.
*/
package fintech.bo.db.jooq.cms.tables;


import fintech.bo.db.jooq.cms.Cms;
import fintech.bo.db.jooq.cms.Keys;
import fintech.bo.db.jooq.cms.tables.records.ItemRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Item extends TableImpl<ItemRecord> {

    private static final long serialVersionUID = -1982991212;

    /**
     * The reference instance of <code>cms.item</code>
     */
    public static final Item ITEM = new Item();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ItemRecord> getRecordType() {
        return ItemRecord.class;
    }

    /**
     * The column <code>cms.item.id</code>.
     */
    public final TableField<ItemRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>cms.item.created_at</code>.
     */
    public final TableField<ItemRecord, LocalDateTime> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>cms.item.created_by</code>.
     */
    public final TableField<ItemRecord, String> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cms.item.entity_version</code>.
     */
    public final TableField<ItemRecord, Long> ENTITY_VERSION = createField("entity_version", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>cms.item.updated_at</code>.
     */
    public final TableField<ItemRecord, LocalDateTime> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>cms.item.updated_by</code>.
     */
    public final TableField<ItemRecord, String> UPDATED_BY = createField("updated_by", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cms.item.content_template</code>.
     */
    public final TableField<ItemRecord, String> CONTENT_TEMPLATE = createField("content_template", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cms.item.description</code>.
     */
    public final TableField<ItemRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cms.item.email_body_template</code>.
     */
    public final TableField<ItemRecord, String> EMAIL_BODY_TEMPLATE = createField("email_body_template", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cms.item.email_subject_template</code>.
     */
    public final TableField<ItemRecord, String> EMAIL_SUBJECT_TEMPLATE = createField("email_subject_template", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cms.item.item_type</code>.
     */
    public final TableField<ItemRecord, String> ITEM_TYPE = createField("item_type", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>cms.item.item_key</code>.
     */
    public final TableField<ItemRecord, String> ITEM_KEY = createField("item_key", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>cms.item.scope</code>.
     */
    public final TableField<ItemRecord, String> SCOPE = createField("scope", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>cms.item.sms_text_template</code>.
     */
    public final TableField<ItemRecord, String> SMS_TEXT_TEMPLATE = createField("sms_text_template", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cms.item.title_template</code>.
     */
    public final TableField<ItemRecord, String> TITLE_TEMPLATE = createField("title_template", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cms.item.header_template</code>.
     */
    public final TableField<ItemRecord, String> HEADER_TEMPLATE = createField("header_template", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cms.item.footer_template</code>.
     */
    public final TableField<ItemRecord, String> FOOTER_TEMPLATE = createField("footer_template", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>cms.item.locale</code>.
     */
    public final TableField<ItemRecord, String> LOCALE = createField("locale", org.jooq.impl.SQLDataType.CLOB.nullable(false).defaultValue(org.jooq.impl.DSL.field("'es'::text", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * Create a <code>cms.item</code> table reference
     */
    public Item() {
        this("item", null);
    }

    /**
     * Create an aliased <code>cms.item</code> table reference
     */
    public Item(String alias) {
        this(alias, ITEM);
    }

    private Item(String alias, Table<ItemRecord> aliased) {
        this(alias, aliased, null);
    }

    private Item(String alias, Table<ItemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Cms.CMS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ItemRecord> getPrimaryKey() {
        return Keys.ITEM_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ItemRecord>> getKeys() {
        return Arrays.<UniqueKey<ItemRecord>>asList(Keys.ITEM_PKEY, Keys.U_ITEM_KEY_LOCALE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ItemRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ItemRecord, ?>>asList(Keys.ITEM__FK_LOCALE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Item as(String alias) {
        return new Item(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Item rename(String name) {
        return new Item(name, null);
    }
}
