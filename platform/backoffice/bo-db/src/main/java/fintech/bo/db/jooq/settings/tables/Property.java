/*
 * This file is generated by jOOQ.
*/
package fintech.bo.db.jooq.settings.tables;


import fintech.bo.db.jooq.settings.Keys;
import fintech.bo.db.jooq.settings.Settings;
import fintech.bo.db.jooq.settings.tables.records.PropertyRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Property extends TableImpl<PropertyRecord> {

    private static final long serialVersionUID = 2087345452;

    /**
     * The reference instance of <code>settings.property</code>
     */
    public static final Property PROPERTY = new Property();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PropertyRecord> getRecordType() {
        return PropertyRecord.class;
    }

    /**
     * The column <code>settings.property.type</code>.
     */
    public final TableField<PropertyRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>settings.property.id</code>.
     */
    public final TableField<PropertyRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('settings.property_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>settings.property.created_at</code>.
     */
    public final TableField<PropertyRecord, LocalDateTime> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>settings.property.created_by</code>.
     */
    public final TableField<PropertyRecord, String> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>settings.property.entity_version</code>.
     */
    public final TableField<PropertyRecord, Long> ENTITY_VERSION = createField("entity_version", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>settings.property.updated_at</code>.
     */
    public final TableField<PropertyRecord, LocalDateTime> UPDATED_AT = createField("updated_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>settings.property.updated_by</code>.
     */
    public final TableField<PropertyRecord, String> UPDATED_BY = createField("updated_by", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>settings.property.description</code>.
     */
    public final TableField<PropertyRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>settings.property.name</code>.
     */
    public final TableField<PropertyRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>settings.property.boolean_value</code>.
     */
    public final TableField<PropertyRecord, Boolean> BOOLEAN_VALUE = createField("boolean_value", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>settings.property.date_value</code>.
     */
    public final TableField<PropertyRecord, LocalDate> DATE_VALUE = createField("date_value", org.jooq.impl.SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>settings.property.date_time_value</code>.
     */
    public final TableField<PropertyRecord, LocalDateTime> DATE_TIME_VALUE = createField("date_time_value", org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>settings.property.decimal_value</code>.
     */
    public final TableField<PropertyRecord, BigDecimal> DECIMAL_VALUE = createField("decimal_value", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 2), this, "");

    /**
     * The column <code>settings.property.number_value</code>.
     */
    public final TableField<PropertyRecord, Long> NUMBER_VALUE = createField("number_value", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>settings.property.text_value</code>.
     */
    public final TableField<PropertyRecord, String> TEXT_VALUE = createField("text_value", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>settings.property</code> table reference
     */
    public Property() {
        this("property", null);
    }

    /**
     * Create an aliased <code>settings.property</code> table reference
     */
    public Property(String alias) {
        this(alias, PROPERTY);
    }

    private Property(String alias, Table<PropertyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Property(String alias, Table<PropertyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Settings.SETTINGS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PropertyRecord, Long> getIdentity() {
        return Keys.IDENTITY_PROPERTY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PropertyRecord> getPrimaryKey() {
        return Keys.PROPERTY_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PropertyRecord>> getKeys() {
        return Arrays.<UniqueKey<PropertyRecord>>asList(Keys.PROPERTY_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Property as(String alias) {
        return new Property(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Property rename(String name) {
        return new Property(name, null);
    }
}
